using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Sudoku
{
    class Program
    {
        static void Main(string[] args)
        {
            int[,] board =
            {
                {0,0,0,1,7,0,0,9,0},
                {7,2,0,0,0,4,5,1,0},
                {0,3,1,9,0,0,0,7,4},
                {6,5,0,0,4,9,2,0,0},
                {0,0,4,0,0,0,9,0,0},
                {0,0,2,7,3,0,0,4,5},
                {2,4,0,0,0,7,1,5,0},
                {0,1,5,4,0,0,0,2,6},
                {0,7,0,0,1,2,0,0,0}
            };

            int[,] boardEasy =
            {
                {0,0,5,0,0,9,0,0,4},//2 on 0
                {0,0,0,0,0,0,3,0,7},
                {7,0,0,8,5,6,0,1,0},//6 on 5
                {4,5,0,7,0,0,0,0,0},
                {0,0,9,0,0,0,1,0,0},
                {0,0,0,0,0,2,0,8,5},
                {0,2,0,4,1,8,0,0,6},
                {0,0,8,0,0,0,0,0,0}, //6 on 0
                {1,9,0,2,0,0,7,0,8}
            };

            int[,] boardMedium =
            {
                {0,0,6,0,9,0,2,0,0},
                {0,0,0,7,0,2,0,0,0},
                {0,9,0,5,0,8,0,7,0},
                {9,0,0,0,3,0,0,0,6},
                {7,5,0,0,0,0,0,1,9},
                {1,0,0,0,4,0,0,0,5},
                {0,1,0,3,0,9,0,8,0},
                {0,0,0,2,0,1,0,0,0},
                {0,0,9,0,8,0,1,0,0}
            };

            int[,] boardHard =
            {
                {0,0,0,8,0,0,0,0,0},
                {7,8,9,0,1,0,0,0,6},
                {0,0,0,0,0,6,1,0,0}, // 1 on 7
                {0,0,7,0,0,0,0,5,0},
                {5,0,8,7,0,9,3,0,4},
                {0,4,0,0,0,0,2,0,0},
                {0,0,3,2,0,0,0,0,0},
                {8,0,0,0,7,0,4,3,9},
                {0,0,0,0,0,1,0,0,0}
            };

            int[,] board4 =
            {
                {1,2, 3,4},
                {0,4, 0,0},

                {0,0, 0,0},
                {0,0, 1,0},
            };

            int[,] board9 =
            {
                {1,2,3, 4,5,6, 7,8,9},
                {0,0,0, 0,0,0, 0,0,0},
                {0,0,0, 0,0,0, 0,0,0},

                {0,0,0, 0,0,0, 0,0,0},
                {0,0,0, 0,0,0, 0,0,0},
                {0,0,0, 0,0,0, 0,0,0},
                
                {0,0,0, 0,0,0, 0,0,0},
                {0,0,0, 0,0,0, 0,0,0},
                {0,0,0, 0,0,0, 0,0,0}
            };

            //Manually canceled after 60 minutes
            int[,] board16_1 =
            {
               
           /*1*/ {0,0,4,0,   0,16,7,0,   0,0,11,0,   8,0,1,3},
           /*2*/ {0,9,0,11,   0,0,13,0,   0,0,0,0,   7,0,10,0},
           /*3*/ {0,15,0,16,   1,3,0,12,   0,0,0,0,   0,9,0,0},
           /*4*/ {8,0,0,0,   0,0,0,9,   0,0,16,10,   13,6,0,0},

           /*5*/ {0,1,0,9,   0,6,0,0,   10,0,12,0,   0,0,13,0},
           /*6*/ {14,0,0,0,   0,0,16,0,   0,11,6,2,   3,1,8,0},
           /*7*/ {0,0,0,0,   13,0,0,4,   0,3,9,0,   16,0,0,12},
           /*8*/ {0,0,0,0,   8,0,3,0,   4,0,15,0,   11,5,2,0},

           /*9*/ {9,0,0,5,   11,0,0,2,   7,0,1,16,   0,0,14,10},
          /*10*/ {0,0,0,4,   14,10,0,0,   8,0,0,0,   12,0,16,0},
          /*11*/ {12,0,16,1,   0,5,9,0,   0,15,0,0,   0,2,0,4},
          /*12*/ {0,0,14,0,   0,0,0,7,   2,6,0,0,   0,8,0,5},

          /*13*/ {10,14,0,0,   12,8,0,0,   0,0,0,0,   5,3,0,2},
          /*14*/ {0,0,12,0,   0,2,0,0,   14,10,0,0,   0,0,6,0},
          /*15*/ {0,0,0,0,   0,0,4,11,   0,0,0,0,   10,0,15,0},
          /*16*/ {4,0,6,13,   0,0,0,0,   0,0,0,9,   0,16,0,0},
            };

            //Manually cancelled after 5 minutes
            int[,] board16_2 =
            {
               
           /*1*/ {13,0,4,0,   0,16,7,0,   9,0,11,0,   8,0,1,3},
           /*2*/ {0,9,0,11,   0,0,13,0,   0,0,0,0,   7,0,10,0},
           /*3*/ {7,15,0,16,   1,3,0,12,   0,0,0,0,   2,9,0,0},
           /*4*/ {8,0,0,3,   5,0,0,9,   0,0,16,10,   13,6,0,14},

           /*5*/ {0,1,0,9,   0,6,0,0,   10,0,12,0,   14,0,13,0},
           /*6*/ {14,0,0,0,   0,0,16,0,   0,11,6,2,   3,1,8,0},
           /*7*/ {0,0,0,0,   13,0,0,4,   0,3,9,0,   16,0,0,12},
           /*8*/ {0,0,0,0,   8,0,3,0,   4,0,15,0,   11,5,2,0},

           /*9*/ {9,0,0,5,   11,0,0,2,   7,0,1,16,   0,0,14,10},
          /*10*/ {0,0,0,4,   14,10,0,0,   8,0,0,0,   12,0,16,0},
          /*11*/ {12,0,16,1,   0,5,9,0,   0,15,0,0,   0,2,0,4},
          /*12*/ {0,0,14,0,   0,0,0,7,   2,6,0,0,   0,8,0,5},

          /*13*/ {10,14,0,0,   12,8,0,0,   11,0,13,0,   5,3,0,2},
          /*14*/ {0,0,12,0,   0,2,0,0,   14,10,0,0,   0,0,6,0},
          /*15*/ {5,0,0,0,   0,0,4,11,   0,0,0,0,   10,0,15,0},
          /*16*/ {4,0,6,13,   0,0,0,0,   0,0,0,9,   0,16,0,0},
            };

            //Solved in a reasonable time :)
            int[,] board16_3 =
            {
               
           /*1*/ {0,0,4,14,   10,16,7,15,   9,2,11,5,   0,12,1,3},
           /*2*/ {2,9,5,11,   4,14,13,0,   12,8,3,1,   7,15,10,16},
           /*3*/ {7,15,10,16,   1,3,8,12,   6,13,14,4,   2,0,5,11},
           /*4*/ {8,12,1,3,   5,11,2,9,   15,7,16,10,   13,6,4,14},

           /*5*/ {3,1,8,9,   2,6,11,5,   10,16,12,7,   14,4,13,15},
           /*6*/ {14,4,0,15,   7,12,16,10,   5,11,6,2,   3,1,8,9},
           /*7*/ {11,5,2,6,   13,15,14,4,   1,3,9,8,   16,10,7,12},
           /*8*/ {0,0,0,0,   8,0,3,0,   4,0,15,0,   11,5,2,0},

           /*9*/ {9,8,0,5,   11,0,0,2,   7,0,1,16,   0,0,14,10},
          /*10*/ {0,0,0,4,   14,10,0,0,   8,0,0,0,   12,0,16,0},
          /*11*/ {12,0,16,1,   0,5,9,0,   0,15,0,0,   0,2,0,4},
          /*12*/ {0,0,14,0,   0,0,0,7,   2,6,0,0,   0,8,0,5},

          /*13*/ {10,14,0,0,   12,8,0,0,   11,0,13,0,   5,3,0,2},
          /*14*/ {0,0,12,0,   0,2,0,0,   14,10,0,0,   0,0,6,0},
          /*15*/ {5,0,0,0,   0,0,4,11,   0,0,0,0,   10,0,15,0},
          /*16*/ {4,0,6,13,   15,7,10,14,   0,0,0,9,   0,16,0,0},
            };

            SudokuSolver ss = new SudokuSolver();
            board = board16_3;
            ss.PrintBoard(board);

            //ss.FindAllSolutions_9x9(board);
            ss.FindAllSolutions(board);

            int numberOfSolutions = ss.SolutionList.Count();
            if (numberOfSolutions == 1)
            {
                Console.WriteLine("One solution");
                ss.PrintSolutionList();
            }
            if (numberOfSolutions == 0) Console.WriteLine("No solutions");
            if (numberOfSolutions > 1)
            {
                Console.WriteLine("Too many solutions");
                ss.PrintSolutionList();
            }

            Console.ReadKey();


        }
    }
}
